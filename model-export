#!/bin/bash

# Author: Nathanel Titane - nathanel.titane@gmail.com - Copyright 2016

shopt -s extglob globstar nullglob

# model export #

black= red= green= yellow= blue= magenta= cyan= white= reset=

if [[ -t 1 ]]
then
	black=$(tput setaf 0)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	blue=$(tput setaf 4)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
	white=$(tput setaf 7)
	reset=$(tput sgr0)
fi

version="25-08-2017"
script=$(basename -- "$0")

while (($#))
do
	case "$1" in
		-l|--ldr)
			extension_filter="ldr"
			;;
		-m|--mpd)
			extension_filter="mpd"
			;;
		-3ds)
			option="3ds"
			;;
		-b|--blender)
			option="blender"
			;;
		-c|--collada)
			option="collada"
			;;
		-wf|--wavefront)
			option="wavefront"
			;;
		-h|--help)
			echo -e "Usage:"
			echo -e "./$script [EXTENSION] [OPTION]"
			echo -e ""
			echo -e "Utility options:"
			echo -e "-l, --ldr \t\t Selects ldr file format as target."
			echo -e "-m, --mpd \t\t Selects mpd file format as target."
			echo -e "-3ds \t\t\t Export 3ds file format only."
			echo -e "-b, --blender \t\t\t Export blender file format only."
			echo -e "-c, --collada \t Export collada file format only."
			echo -e "-wf, --wavefront \t Export wavefront (obj and mtl as zip archive) file format only."
			echo -e "-h, --help \t\t Show help options."
			echo -e "-v, --version \t Print version."
			exit
			;;
		-v|--version)
			echo -e "$script $version"
			exit
			;;
		*)
			echo -e "$script: Unknown option $1"
			echo -e "Try '$script --help' for options information."
			exit
			;;
		esac
	shift
done

# Test for utility dependencies and requirements

for binary_name in \
"leocad" \
"blender" \
"zip"
do
	binary=$(which $binary_name)

	if [[ -z "$binary" ]] # If binary is not found or unspecified
	then
		echo "${yellow}The '$binary_name' binary does not seem to be installed or present on your system.${reset}"
		echo "${yellow}Would you like to specify its location manually? [ Yes | No ]${reset}"

		read reply

		if [[ "$reply" = [yY] || "$reply" = [yY][eE][sS] ]]
		then
			# Specify binary location or exit on 'Cancel'

			binary_path=$(zenity --file-selection  --multiple --separator=$'\n' --title="Please specify binary location") 2> /dev/null || exit

			binary="$binary_path/$binary"
		else
			echo "${red}Could not specify '$binary_name' binary installed on system.${reset}"
			echo "${red}Please install '$binary_name' using your system's package manager${reset}"
			echo "${red}and restart this utility when you are done.${reset}"
			echo ""
			exit 1
		fi

	elif [[ ! -z "$binary" ]] # If binary exists
	then
		echo "${green}'$binary' binary found on system - Continuing...${reset}"
		echo ""

		leocad=$(which leocad)
		blender=$(which blender)
		zip=$(which zip)
	fi

	sleep 1
done

if [[ "$extension_filter" == "ldr" ]]
then
	extension_filter="ldr"
	extension="ldr"

elif [[ "$extension_filter" == "mpd" ]]
then
	extension_filter="mpd"
	extension="mpd"
else
	extension_filter="mpd"
	extension="mpd"

	echo "${yellow}Defaulting to $extension file format option.${reset}" # Warning when no option set for file type
	echo""
fi

if [[ "$option" == "3ds" ]]
then
	export_option="-3ds"
	export_extension="3ds"

elif [[ "$option" == "blender" ]]
then
	export_option="-3ds"
	export_extension="blend"

elif [[ "$option" == "collada" ]]
then
	export_option="-dae"
	export_extension="dae"

elif [[ "$option" == "wavefront" ]]
then
	export_option="-obj"
	export_extension="obj"
else
	option="collada"
	export_option="-dae"
	export_extension="dae"

	echo "${yellow}Defaulting to $export_extension file export option.${reset}" # Warning when no option set for export type
	echo ""
fi

# Generate temporary content

beautify=$(mktemp /tmp/beautify.XXXXXX)
trap 'rm -rf "$beautify"' EXIT

# Push python blender beautifier conversion script to temporary file

cat > "$beautify" << 'PYTHON'
#!/usr/bin/env python3

import os
import bpy
from sys import argv

context = bpy.context

# arguments #
# [blender, --background, --python, script, 3ds]
# model_path = argv[4]

# prepare scene #

for obj in context.scene.objects:
	obj.select = True

bpy.ops.object.delete()

# import #

export_model = argv[4]
bpy.ops.import_scene.autodesk_3ds(filepath=export_model)

# join objects #

context.scene.objects.active = context.selected_objects[0]
bpy.ops.object.join()

# normalize transforms #
bpy.ops.object.transform_apply(
	location = True,
	rotation = True,
	scale = True
)

# add smooth shade and edge split modifiers #

bpy.ops.object.shade_smooth()
bpy.ops.object.modifier_add(
	type = "EDGE_SPLIT"
)

# remove doubles #

bpy.ops.object.editmode_toggle()
bpy.ops.mesh.remove_doubles()

# remove loose vertices #

bpy.ops.mesh.select_loose()
bpy.ops.mesh.delete(type='VERT')

bpy.ops.mesh.normals_make_consistent(
	inside = False
)
bpy.ops.object.editmode_toggle()

# save #

blend_file = export_model.replace(".3ds",".blend")
bpy.ops.wm.save_as_mainfile(
	filepath = blend_file,
	compress = True
)

# print output #

print("saved as:", blend_file)
bpy.ops.wm.quit_blender()
PYTHON

# Confirm options being used before processing

echo "${cyan}Utility started using the $extension file format option.${reset}"
echo "${cyan}Utility started using the $option file format option.${reset}"
echo ""

echo "${cyan}Please specify the directory in which you would like the ldraw model files to the be exported to the specified format.${reset}"

# Specify directory location or exit on 'Cancel'

directory=$(zenity --file-selection  --multiple --directory --separator=$'\n' --title="Select a Directory") 2> /dev/null || exit

IFS=$'\n'
selection=($directory)

for directory in "${selection[@]}"
do
	cd "$directory" || exit

	for model in "${directory%/}"/**/*."$extension_filter"
	do
		IFS='/'
		read -r -a path <<< "$directory"

		media_directory=${path[1]}
		disk_directory=${path[2]}
		dropbox_directory=${path[3]}
		lego_directory=${path[4]}
		models_directory=${path[5]}
		model_type_directory=${path[6]}
		model_directory=${path[7]}

		# Define model exports top directory

		exports_directory="/media/Disk/Dropbox/Lego/exports"

		# Define model exports UID list location

		uid_list="/media/Disk/Dropbox/Linux/scripts/ldraw/sketchfab/uid-list"

		# Define file naming variables

		model_file="${model##*/}"					# Get model file name from path
		model_file_name="${model_file%.*}"			# Strip extension from model file name
		model_export_name="${model_file_name:3}"	# Strip first 3 characters from model file name (normally '00-')

		# Define render directory location by model

		export_directory="$exports_directory/$model_type_directory/$model_export_name"

		export_file="$exports_directory/$model_type_directory/$model_export_name/$model_export_name.$export_extension"

		# Explicit file types

		export_file_3ds="$exports_directory/$model_type_directory/$model_export_name/$model_export_name.3ds"
		export_file_blend="$exports_directory/$model_type_directory/$model_export_name/$model_export_name.blend"
		export_file_collada="$exports_directory/$model_type_directory/$model_export_name/$model_export_name.dae"

		# Check for the exports directory existence

		if [ ! -d "$exports_directory/$model_type_directory/$model_export_name" ]
		then
			mkdir -p "$exports_directory/$model_type_directory/$model_export_name"
		fi

		# Export 3DS file

		if [[ "$option" = "3ds" ]]
		then
			echo "${cyan}Exporting $model ("$export_extension")...${reset}"

			if [[ ! -d "$export_directory" ]]
			then
				mkdir -p "$export_directory"
			fi

			"$leocad" "$model" "$export_option" "$export_file" >> /dev/null

			wait
		fi

		# Export optimized blend file

		if [[ "$option" = "blender" ]]
		then
			echo "${cyan}Exporting $model ("$export_extension")...${reset}"

			# Generate 3DS file

			if [[ ! -d "$export_directory" ]]
			then
				mkdir -p "$export_directory"
			fi

			"$leocad" "$model" "$export_option" "$export_file" >> /dev/null

			wait

			echo "${cyan}Converting $model ("$export_extension")...${reset}"

			# Import 3DS file into blender to create optimized blend file

			"$blender" --background --python "$beautify" "$export_file_3ds" >> /dev/null

			# Cleanup

			rm -rf "$export_file_3ds"

			wait
		fi

		# Export collada file

		if [[ "$option" = "collada" ]]
		then
			echo "${cyan}Exporting $model ("$export_extension")...${reset}"

			if [[ ! -d "$export_directory" ]]
			then
				mkdir -p "$export_directory"
			fi

			"$leocad" "$model" "$export_option" "$export_file_collada" >> /dev/null

			wait
		fi

		# Export wavefront file with materials archive

		if [[ "$option" = "wavefront" ]]
		then
					if [[ ! -d "$export_directory" ]]
			then
				mkdir -p "$export_directory"
			fi

			"$leocad" "$model" "$export_option" "$export_file" >> /dev/null

			cd "$export_directory" || exit

			# Archive .obj and respective .mtl files for exported model
			# when using the wavefront file export option for easy model upload or update

			export_file="${model_export_name}.zip"

			zip "$export_file" {*.obj,*.mtl}
			rm -rf {*.obj,*.mtl}

			wait
		fi

		echo ""

		# Compare model name to uid list model entry and generate uid token file
		# under model's export directory for proper update authentication

		# Read UID from list

		while IFS=$'\n'
		read -r line
		do
			IFS='|'
			read -r -a row <<<  "$(echo "$line" | sed 's/||*/|/g')"

			model_uid=${row[0]}
			model_upload_name=${row[1]}
			model_file_name_list=${row[2]}
			model_web_id=${row[3]}

			list_uid=""

			if [[ "$model_export_name" == "$model_file_name_list" ]] # If model export name matches list entry
			then
				model_list_uid_message="${green}Model export name matches UID list entry...${reset}"
				list_uid="$model_uid"
				color=$(tput setaf 2) # green

				echo "$model_uid" > "$export_directory/uid"

				break
			fi

		done < "$uid_list"

		if [ -z "$list_uid" ]
		then
			model_list_uid_message="${red}Model export name does not match UID list entry...${reset}"
			list_uid="N/A"
			color=$(tput setaf 1) # red
		fi

		# Read UID from file

		if [[ -e "$export_directory/uid" ]]
		then
			model_read_uid_message="${green}UID file exists under model export directory...${reset}"
			read_uid=$(cat "$export_directory"/uid)

			if [[ -z "$read_uid" ]]
			then
				model_read_uid_message="${red}UID file empty or not found...${reset}"
				read_uid="N/A"
			fi
		fi

		# Verify exported file size and display message accordingly (Free account model upload limit: 50MB)

		model_size=$(ls -s --block-size=MB "$export_file" | awk '{print $1}')

		model_size_threshold="50"
		model_size_number="${model_size%MB}"

		if [[ "$model_size_number" -le "$model_size_threshold" ]]
		then
			model_size_message="${green}Model file size is below ${model_size_threshold}MB [ $model_size ] - File size threshold not exceeded.${reset}"
			color=$(tput setaf 2) # green

		elif [[ "$model_size_number" -gt "$model_size_threshold" ]]
		then
			model_size_message="${red}Warning: Model file size is above ${model_size_threshold}MB [ $model_size ] - Model cannot be uploaded to free subscription account due to maximum size limitation.${reset}"
			color=$(tput setaf 1) # red
		fi

		echo "${message}"
		echo "${confirmation}"
		echo ""
		echo "${model_list_uid_message}"
		echo "Model ID [ List ]...: $list_uid"
		echo "${model_read_uid_message}"
		echo "Model ID [ File ]...: $read_uid"
		echo ""
		echo "Model name..........: $model_export_name"
		echo "Model size..........: $model_size"
		echo ""
		echo "${model_size_message}"
		echo ""

		echo "${cyan}Done.${reset}"
		echo ""
	done
done
