#!/bin/bash

# Author: Nathanel Titane - nathanel.titane@gmail.com

# ldraw model modify #

black= red= green= yellow= blue= magenta= cyan= white= reset=

if [[ -t 1 ]]
then
	black=$(tput setaf 0)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	blue=$(tput setaf 4)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
	white=$(tput setaf 7)
	reset=$(tput sgr0)
fi

version="01-01-2020"
script=$(basename -- "$0")

while (($#))
do
	case "$1" in
		-d|--directory)
			shift
			directory="$1"
			;;
		-a|--all)
			extension_option="all"
			extensions_list=(ldr mpd)
			;;
		-l|--ldr)
			extension_option="ldr"
			extensions_list=(ldr)
			;;
		-m|--mpd)
			extension_option="mpd"
			extensions_list=(mpd)
			;;
		-c|--color)
			option="color"
			;;
		-p|--part)
			option="part"
			;;
		-b|--bind)
			option="bind"
			;;
		-f|--format)
			option="format"
			;;
        -s|--step)
			option="step"
			;;
		-o|--overwrite)
			overwrite_option="overwrite"
			;;
		-h|--help)
			echo -e "Usage:"
			echo -e "./$script [EXTENSION] [OPTION] [DIRECTORY]"
			echo -e ""
			echo -e "Utility options:"
			echo -e "-a, --all \t\t Selects ldr and mpd file formats as target."
			echo -e "-l, --ldr \t\t Selects ldr file format as target."
			echo -e "-m, --mpd \t\t Selects mpd file format as target. - This option has not yet been implemented."
			echo -e "-d, --directory \t\t Specifies execution directory for specified file format(s)."
			echo -e "-c, --color \t\t Modifies the part color attribute only."
			echo -e "-p, --part \t\t Modifies the part number attribute only."
			echo -e "-b, --bind \t\t Matches a part to a specific color and modifies the color for that part."
			echo -e "-f, --format \t\t Strips and cleans file from older LDraw editor formats and sets output to UTF-8 standard."
            echo -e "-s, --step \t\t Separates and formats ldr submodels as individual steps."
			echo -e "-o, --overwrite \t\t Assumes 'Yes' and forces the overwrite of the original model file after modification."
			echo -e ""
			echo -e "-h, --help \t\t Show help options."
			echo -e "-v, --version \t Print version."
			exit
			;;
		-v|--version)
			echo -e "$script $version"
			exit
			;;
		*)
			echo -e "$script: Unknown option $1"
			echo -e "Try '$script --help' for options information."
			exit
			;;
		esac
	shift
done

zenity() {
	/usr/bin/zenity "$@" 2>/dev/null
}

# Generate temporary file

colors=$(mktemp /tmp/ldraw-colors.XXXXXX)
trap 'rm -rf "$colors"' EXIT

# Push LDraw colors list to temporary file

cat > "$colors" << 'COLORS'
Black                                   0          #05131D
Blue                                    1          #0055BF
Green                                   2          #257A3E
Dark_Turquoise                          3          #00838F
Red                                     4          #C91A09
Dark_Pink                               5          #C870A0
Brown                                   6          #583927
Light_Gray                              7          #9BA19D
Dark_Gray                               8          #6D6E5C
Light_Blue                              9          #B4D2E3
Bright_Green                            10         #4B9F4A
Light_Turquoise                         11         #55A5AF
Salmon                                  12         #F2705E
Pink                                    13         #FC97AC
Yellow                                  14         #F2CD37
White                                   15         #FFFFFF
Light_Green                             17         #C2DAB8
Light_Yellow                            18         #FBE696
Tan                                     19         #E4CD9E
Light_Violet                            20         #C9CAE2
Purple                                  22         #81007B
Dark_Blue_Violet                        23         #2032B0
Orange                                  25         #FE8A18
Magenta                                 26         #923978
Lime                                    27         #BBE90B
Dark_Tan                                28         #958A73
Bright_Pink                             29         #E4ADC8
Medium_Lavender                         30         #AC78BA
Lavender                                31         #E1D5ED
Very_Light_Orange                       68         #F3CF9B
Light_Purple                            69         #CD6298
Reddish_Brown                           70         #582A12
Light_Bluish_Gray                       71         #A0A5A9
Dark_Bluish_Gray                        72         #6C6E68
Medium_Blue                             73         #5C9DD1
Medium_Green                            74         #73DCA1
Light_Pink                              77         #FECCCF
Light_Flesh                             78         #F6D7B3
Medium_Dark_Flesh                       84         #CC702A
Dark_Purple                             85         #3F3691
Dark_Flesh                              86         #7C503A
Blue_Violet                             89         #4C61DB
Flesh                                   92         #D09168
Light_Salmon                            100        #FEBABD
Violet                                  110        #4354A3
Medium_Violet                           112        #6874CA
Medium_Lime                             115        #C7D23C
Aqua                                    118        #B3D7D1
Light_Lime                              120        #D9E4A7
Light_Orange                            125        #F9BA61
Very_Light_Bluish_Gray                  151        #E6E3E0
Bright_Light_Orange                     191        #F8BB3D
Bright_Light_Blue                       212        #86C1E1
Rust                                    216        #B31004
Bright_Light_Yellow                     226        #FFF03A
Sky_Blue                                232        #56BED6
Dark_Blue                               272        #0D325B
Dark_Green                              288        #184632
Dark_Brown                              308        #352100
Maersk_Blue                             313        #54A9C8
Dark_Red                                320        #720E0F
Dark_Azure                              321        #1498D7
Medium_Azure                            322        #3EC2DD
Light_Aqua                              323        #BDDCD8
Yellowish_Green                         326        #DFEEA5
Olive_Green                             330        #9B9A5A
Sand_Red                                335        #D67572
Medium_Dark_Pink                        351        #F785B1
Earth_Orange                            366        #FA9C1C
Sand_Purple                             373        #845E84
Sand_Green                              378        #A0BCAC
Sand_Blue                               379        #597184
Fabuland_Brown                          450        #B67B50
Medium_Orange                           462        #FFA70B
Dark_Orange                             484        #A95500
Very_Light_Gray                         503        #E6E3DA
Trans_Clear                             47         #FCFCFC
Trans_Black                             40         #635F52
Trans_Red                               36         #C91A09
Trans_Neon_Orange                       38         #FF800D
Trans_Orange                            57         #F08F1C
Trans_Neon_Yellow                       54         #DAB000
Trans_Yellow                            46         #F5CD2F
Trans_Neon_Green                        42         #C0FF00
Trans_Bright_Green                      35         #56E646
Trans_Green                             34         #237841
Trans_Dark_Blue                         33         #0020A0
Trans_Medium_Blue                       41         #559AB7
Trans_Light_Blue                        43         #AEE9EF
Trans_Very_Light_Blue                   39         #C1DFF0
Trans_Light_Purple                      44         #96709F
Trans_Purple                            52         #A5A5CB
Trans_Dark_Pink                         37         #DF6695
Trans_Pink                              45         #FC97AC
Chrome_Gold                             334        #BBA53D
Chrome_Silver                           383        #E0E0E0
Chrome_Antique_Brass                    60         #645A4C
Chrome_Black                            64         #1B2A34
Chrome_Blue                             61         #6C96BF
Chrome_Green                            62         #3CB371
Chrome_Pink                             63         #AA4D8E
Pearl_White                             183        #F2F3F2
Pearl_Very_Light_Gray                   150        #BBBDBC
Pearl_Light_Gray                        135        #9CA3A8
Flat_Silver                             179        #898788
Pearl_Dark_Gray                         148        #575857
Metal_Blue                              137        #5677BA
Pearl_Light_Gold                        142        #DCBE61
Pearl_Gold                              297        #CC9C2B
Flat_Dark_Gold                          178        #B4883E
Copper                                  134        #964A27
Metallic_Silver                         80         #A5A9B4
Metallic_Green                          81         #899B5F
Metallic_Gold                           82         #DBAC34
Metallic_Black                          83         #1A2831
Metallic_Dark_Gray                      87         #6D6E5C
Milky_White                             79         #FFFFFF
Glow_In_Dark_Opaque                     21         #E0FFB0
Glow_In_Dark_Trans                      294        #BDC6AD
Glitter_Trans_Dark_Pink                 114        #DF6695
Glitter_Trans_Clear                     117        #FFFFFF
Glitter_Trans_Purple                    129        #640061
Speckle_Black_Silver                    132        #000000
Speckle_Black_Gold                      133        #000000
Speckle_Black_Copper                    75         #000000
Speckle_Dark_Bluish_Gray_Silver         76         #635F61
Rubber_Yellow                           65         #F5CD2F
Rubber_Trans_Yellow                     66         #CAB000
Rubber_Trans_Clear                      67         #FFFFFF
Rubber_Black                            256        #212121
Rubber_Blue                             273        #0033B2
Rubber_Red                              324        #C40026
Rubber_Orange                           350        #D06610
Rubber_Light_Gray                       375        #C1C2C1
Rubber_Dark_Blue                        406        #001D68
Rubber_Purple                           449        #81007B
Rubber_Lime                             490        #D7F000
Rubber_Light_Bluish_Gra                 496        #A3A2A4
Rubber_Flat_Silver                      504        #898788
Rubber_White                            511        #FAFAFA
Main_Colour                             16         #7F7F7F
Edge_Colour                             24         #7F7F7F
Trans_Black_IR_Lens                     32         #000000
Magnet                                  493        #656761
Electric_Contact_Alloy                  494        #D0D0D0
Electric_Contact_Copper                 495        #AE7A59
COLORS

parse_input () {
	while true
	do
		read input

		if [[ -z $input ]]
		then
			echo "${yellow}Warning:${reset}"
			echo "${yellow}Empty value. Please try again...${reset}"
			echo ""
		else
			break
		fi
	done
}

parse_colors () {
	parse_input

	color_input="${input,,}"

	while IFS=$' '
	read -r ldraw_color_name ldraw_color_number ldraw_color_hex_value
	do
		# Color input entries cleanup

		# Color name

		space_name="${ldraw_color_name//_/ }"		# Remove underscores from name
		name="${space_name,,}"				# Set name to lowercase for input match
		ldraw_color_name="${name}"			# Reattribute input variable to lowercase name value

		# Color hex value

		hex_value="${ldraw_color_hex_value//#/}"	# Remove pound from name
		hex_value="${hex_value,,}"			# Set name to lowercase for input match
		ldraw_color_hex_value=${hex_value}		# Reattribute input variable to lowercase name value

		if [[ "$color_input" == "$ldraw_color_name" || "$color_input" == "$ldraw_color_number" || "$color_input" == "$ldraw_color_hex_value" ]]
		then
			echo "Color name................: ${ldraw_color_name}" 			# Confirmation
			echo "Color number..............: ${ldraw_color_number}"		# Confirmation
			echo "Color hexadecimal value...: ${ldraw_color_hex_value}"		# Confirmation

			return "$ldraw_color_number"
		fi

	done < "$colors"

	echo "${red}NO MATCH${reset}"
	exit 1
}

parse_parts () {
	parse_input
	part_input="$input"
	
	return "$part_input"
}

# Confirm options being used before processing

echo "${cyan}Utility started using the $extension_option file extension option.${reset}"
echo "${cyan}Utility started using the $option modification preset.${reset}"
echo ""

sleep 1

if [[ "$option" == "overwrite" ]]
then
	echo "${red}WARNING:${reset}"
	echo "${red}Utility started using the overwrite option.${reset}"
	echo "${red}Parsed model modification will be written to file directly!${reset}"
fi

sleep 1

# Specify directory location or exit on 'Cancel'

if [[ -z "$directory" ]]
then
	directory=$(zenity --file-selection  --multiple --directory --separator=$'\n' --title="Select a Directory") || exit
fi

cd "$directory" || exit

if [[ "$option" = "color" ]]
then
	echo "${cyan}Please enter the color description [ name / number / hexadecimal ] you would like to modify.${reset}"
	parse_colors
	old_color="$ldraw_color_number" # $? returning wrong arbitrary value for $old_color

	echo "${cyan}Please enter the color description [ name / number / hexadecimal ] you would like to set.${reset}"
	parse_colors
	new_color="$ldraw_color_number" # $? returning wrong arbitrary value for $new_color
fi

if [[ "$option" = "part" ]]
then
	echo "${cyan}Please enter the part number you would like to modify.${reset}"
	parse_parts
	old_part="$part_input" # $? returning wrong arbitrary value for $old_part

	echo "${cyan}Please enter the part number you would like to set.${reset}"
	parse_parts
	new_part="$part_input" # $? returning wrong arbitrary value for $new_part
fi

if [[ "$option" = "bind" ]]
then
	echo "${cyan}Please enter the part number you would like to modify.${reset}"
	parse_parts
	part_selection="$part_input" # $? returning wrong arbitrary value for $part_selection

	echo "${cyan}Please enter the matching color description [ name | number | hexadecimal ] you would like to modify for the selected part.${reset}"
	parse_colors
	old_color="$ldraw_color_number" # $? returning wrong arbitrary value for $old_color

	echo "${cyan}Please enter the new color description [ name | number | hexadecimal ] you would like to set for the selected part.${reset}"
	parse_colors
	new_color="$ldraw_color_number" # $? returning wrong arbitrary value for $new_color
fi

# Substitution

IFS=' '

for extension in ${extensions_list[@]}
do
	echo $(find ${directory} -iname *.$extension) | while read -r model
	do
		model_export="${model##*/}"
		model_export_name="${model_export%.*}"
		model_export_name_clean="${model_export_name:5}"

		temporary_file="$model.tmp"

		# Initialize line count

		line_number=0

		while IFS=
		read -r line
		do
			line_number=$(( $line_number + 1 ))

			if [[ "$line" == *!LEOCAD* ]] || [[ "$line" == *FILE* ]] || [[ "$line" == *NOFILE* ]]
			then
				# Skip header and footer lines containing matching patterns - prevents model file syntax modification

				echo "$line" >> "$temporary_file"
				continue
			else
				IFS=' '
				read -r flag color x y z a b c d e f g h i part_dat <<< "$line"

				vect_x="$a $b $c"
				vect_y="$d $e $f"
				vect_z="$g $h $i"

				# ⎡ a d g 0 ⎤	⎡ a b c x ⎤
				# ⎢ b e h 0 ⎥	⎢ d e f y ⎥
				# ⎢ c f i 0 ⎥	⎢ g h i z ⎥
				# ⎣ x y z 1 ⎦	⎣ 0 0 0 1 ⎦

				IFS='.'

				# Split part argument into part number and part extension

				read part suffix <<< "$part_dat"

				# Color substitution

				if [[ "$option" = "color" ]]
				then
					if [[ "$color" = "$old_color" ]]
					then
						color="$new_color"

						echo "${red}Changing..:${reset} $old_color"
						echo "${red}Setting...:${reset} $new_color"
						echo ""
					else
						: # pass
					fi
				fi

				# Part substitution

				if [[ "$option" = "part" ]]
				then
					if [[ "$part" = "$old_part" ]]
					then
						part="$new_part"

						echo "${cyan}Modifying $model..."
						echo ""
						echo "${red}Changing..:${reset} $old_part"
						echo "${red}Setting...:${reset} $new_part"
						echo ""
					else
						: # pass
					fi
				fi

				# Bind (Part + Color) Color substitution

				if [[ "$option" = "bind" ]]
				then
					if [[ "$part" == "$part_selection" ]]
					then
						if [[ "$color" = "$old_color" ]]
						then
							color="$new_color"
						else
							: # pass
						fi
					fi
				fi
				
				# Step ldr submodel separation
								
                if [[ "$option" = "step" ]]
                then
                    if [[ "$line" == *ldr* ]]
                    then
                        if [[ "$suffix" == *ldr* ]]
                        then
                            color="0"
                            suffix="ldr\n0 STEP"
                        else
                            : # pass
                        fi
                    fi
                fi

				# Format - File structure and META substitution

				if [[ "$option" = "format" ]]
				then
					author_string="Nathanel Titane - nathanel.titane@gmail.com - All rights reserved"

					# Strip lines that match the following expressions - comment out to keep

					if	[[ "$line" = 0 ]]		             	|| \
							[[ "$line" = *"New Model"* ]]		|| \
							[[ "$line" = *Author* ]]			|| \
							[[ "$line" = *Name* ]]			    || \
							[[ "$line" = *Unofficial* ]]		|| \
							[[ "$line" = *Untitled* ]]	        || \
							[[ "$line" = *BACKGROUND* ]]		|| \
							[[ "$line" = *GROUP* ]]		        || \
							[[ "$line" = *ROTATION* ]]		    || \
							[[ "$line" = *PIVOT* ]]
					then
						: # pass
					else

						# If line contains '!LPUB' header/meta tag for LPub formatting references

						if [[ "$line" == *!LPUB* ]]
						then
							# Skip header and footer lines containing matching patterns - prevents model file syntax modification

							echo "$line" >> "$temporary_file"
							continue
						else

							# If line contains 'AUTHOR' tag

							if [[ "$line" == *[aA][uU][tT][hH][oO][rR]* ]]
							then
								# Reformat line to specific string

								line="0 !LEOCAD MODEL AUTHOR $author_string"

								echo "$line" >> "$temporary_file"
								continue
							else

								# If line contains '!LEOCAD' header/meta tag

								if [[ "$line" == *!LEOCAD* ]]
								then
									# Skip header and footer lines containing matching patterns - prevents model file syntax modification

									echo "$line" >> "$temporary_file"
									continue
								else

									# If line contains 'NOFILE' header/meta tag for mpd footer references

									if [[ "$line" == *NOFILE* ]]
									then
										# Skip header and footer lines containing matching patterns - prevents model file syntax modification

										echo "$line" >> "$temporary_file"
										continue
									else

										# If line contains 'FILE' header/meta tag for mpd header references

										if [[ "$line" == *FILE* ]]
										then
											IFS=' '
											read -r flag statement file_name <<< "$line"

											clean_file_name="${file_name//\(/}"		# Strip (
											clean_file_name="${clean_file_name//\)/}"	# Strip )
											clean_file_name="${clean_file_name// /-}"	# Spaces to dashes
											clean_file_name="${clean_file_name,,}"		# String to lower case

											# Write changes to tempporary file

											echo "$flag $statement $clean_file_name" >> "$temporary_file"
										else
											# Parse all other lines and format according to regular expressions

											IFS=' '
											read -r flag color x y z a b c d e f g h i part_dat <<< "$line"

											clean_part="${part_dat//\(/}"			# Strip (
											clean_part="${clean_part//\)/}"			# Strip )
											clean_part="${clean_part// /-}"			# Spaces to dashes
											clean_part="${clean_part,,}"			# String to lower case

											vect_x="$a $b $c"
											vect_y="$d $e $f"
											vect_z="$g $h $i"

											# ⎡ a d g 0 ⎤	⎡ a b c x ⎤
											# ⎢ b e h 0 ⎥	⎢ d e f y ⎥
											# ⎢ c f i 0 ⎥	⎢ g h i z ⎥
											# ⎣ x y z 1 ⎦	⎣ 0 0 0 1 ⎦

											# Write changes to temporary file

										fi
									fi
								fi
							fi
						fi
					fi
                fi

				# Write changes to tempporary file

				echo -e "$flag" "$color" "$x" "$y" "$z" "$a" "$b" "$c" "$d" "$e" "$f" "$g" "$h" "$i" "$part.$suffix" >> "$temporary_file"
			fi

		done < "$model" # Feed model into loop for parsing

		# Current date stamp

		stamp=$(date +"%m-%d-%Y-%H-%M-%S")

		# Write changes to file?

		if [[ "$overwrite_option" = "overwrite" ]]
		then
			reply="yes"
			
			echo "${red}'overwrite' option enabled - writing changes to original model file!${reset}"
			echo ""
            echo "${yellow}Writing file ($model)...${reset}"
            echo ""
            
            mv "$temporary_file" "${temporary_file%.tmp}"
			
		else
			echo "${cyan}Would you like to write your changes to the original model file ($model)? [ Yes | No ]${reset}"
			echo ""

			read reply
			
			if [[ "$reply" = [yY] || "$reply" = [yY][eE][sS] ]]
			then			
                echo "${red}Overwriting original model file!${reset}"
                echo ""
                echo "${yellow}Writing file ($model)...${reset}"
                echo ""
                
                 mv "$temporary_file" "${temporary_file%.tmp}"

			else
				echo "${yellow}Unknown input - Writing changes to model file copy...${reset}"
                echo ""
                
                mv "$temporary_file" "${temporary_file%.tmp}_modified_$stamp.$extension"
			fi
		fi
	done
done

echo "${cyan}Done.${reset}"
echo ""
