#!/bin/bash

# Author: Nathanel Titane - nathanel.titane@gmail.com

# ldraw model render #

black= red= green= yellow= blue= magenta= cyan= white= reset=

if [[ -t 1 ]]
then
	black=$(tput setaf 0)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	blue=$(tput setaf 4)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
	white=$(tput setaf 7)
	reset=$(tput sgr0)
fi

version="01-01-2020"
script=$(basename -- "$0")

while (($#))
do
	case "$1" in
		-d|--directory)
			shift
			directory="$1"
			;;
		-a|--all)
			extension_option="all"
			extensions_list=(ldr mpd)
			;;
		-l|--ldr)
			extension_option="ldr"
			extensions_list=(ldr)
			;;
		-m|--mpd)
			extension_option="mpd"
			extensions_list=(mpd)
			;;
		-u|--full)
			position_option="full"
			position_preset="full"
			;;
		-f|--fixed)
			position_option="fixed"
			position_preset="fixed"
			;;
		-o|--outline)
			position_option="outline"
			position_preset="outline"
			;;
		-0|--quarter-back)
			position_option="quarter-back"
			position_preset="quarter-back"
			;;
		-1|--quarter-front)
			position_option="quarter-front"
			position_preset="quarter-front"
			;;
		-2|--back)
			position_option="back"
			position_preset="back"
			;;
		-3|--front)
			position_option="front"
			position_preset="front"
			;;

		-h|--help)
			echo -e "Usage:"
			echo -e "./$script [EXTENSION] [RENDER OPTION] [VIEW PRESET]"
			echo -e ""
			echo -e "Utility options:"
			echo -e "-a, --all \t\t Selects ldr and mpd file formats as target."
			echo -e "-l, --ldr \t\t Selects ldr file format as target."
			echo -e "-m, --mpd \t\t Selects mpd file format as target."
			echo -e ""
			echo -e "-u, --full \t\t Renders series of images using options 0 to 3."
			echo -e "-f, --fixed \t\t Renders series of images using options 0 and 1."
			echo -e "-0, --quarter-back \t Renders image using a quarter-back view preset. [latitude.:30, Lon.: -135]"
			echo -e "-1, --quarter-front \t Renders image using a quarter-front view preset. [latitude.:30, Lon.: 45]"
			echo -e "-2, --back \t\t Renders image using a back view preset.[latitude.:30, Lon.: 180]"
			echo -e "-3, --front \t\t Renders image using a front view preset.[latitude.:30, Lon.: 0]"
			echo -e ""
			echo -e "-h, --help \t\t Show help options."
			echo -e "-v, --version \t\t Print version."
			exit
			;;
		-v|--version)
			echo -e "$script $version"
			exit
			;;
		*)
			echo -e "$script: Unknown option $1"
			echo -e "Try '$script --help' for options information."
			exit
			;;
		esac
	shift
done

# Test for utility dependencies and requirements

echo "${yellow}Verifying utility requirements...${reset}"
echo ""

binaries=(
	leocad
)

for binary_name in ${binaries[@]}
do
	binary=$(which $binary_name)

	# If binary is not found or unspecified

	if [[ -z "$binary" ]]
	then
		echo "${yellow}The '$binary_name' binary does not seem to be installed or present on your system.${reset}"
		echo "${yellow}Would you like to specify its location manually? [ Yes | No ]${reset}"

		read reply

		if [[ "$reply" = [yY] || "$reply" = [yY][eE][sS] ]]
		then
			# Specify binary location or exit on 'Cancel'

			binary_path=$(zenity --file-selection  --multiple --separator=$'\n' --title="Please specify binary location") || exit

			binary="$binary_path/$binary"
		else
			echo "${red}Could not specify '$binary_name' binary installed on system.${reset}"
			echo "${red}Please install '$binary_name' using your system's package manager${reset}"
			echo "${red}and restart this utility when you are done.${reset}"
			echo ""
			
			exit 1
		fi

	# If binary exists

	elif [[ ! -z "$binary" ]]
	then
		echo "${green}'$binary' binary found on system - Continuing...${reset}"
		echo ""

		leocad() {
			$(which leocad)
		}
	fi

	sleep 1
done

zenity() {
	/usr/bin/zenity "$@" 2>/dev/null
}

# Confirm options being used before processing

echo "${cyan}Utility started using the $extension file extension option.${reset}"
echo "${cyan}Utility started using the $position_option view preset.${reset}"
echo ""

sleep 1

# Specify directory location or exit on 'Cancel'

if [[ -z "$directory" ]]
then
	directory=$(zenity --file-selection  --multiple --directory --separator=$'\n' --title="Select a Directory") || exit
fi

for extension in ${extensions_list[@]}
do
	for model in $(echo $(find ${directory} -iname *.$extension))
	do
		model_file="${model##*/}"					# Get model file name from path
		model_file_name="${model_file%.*}"				# Strip extension from model file name
		model_file_render_name="${model_file_name:3}"			# Strip first 3 characters from model file name '00-'

		# Define render routine

		run_leocad () {

			height="4096"
			width="4096"
			extension="png"
			model=$1
			coordinates=$2

			leocad \
				-h "$height" \
				-w "$width" \
				-i "${model_file_render_name}-${view[$coordinates]}.${extension}" \
				--camera-angles ${latitude[$coordinates]} ${longitude[$coordinates]} \
				--shading ${shading} \
				--line-width ${line_width} "$model"
		}

		# Define directory and render parameters for all presets

		renders_directory="${model%/*}/renders/"			# Use model directory as root
		background_directory="${model%/*}/renders/background"		# Use render directory as root
		outline_directory="${model%/*}/renders/outline"			# Use render directory as root

		# Default camera latitude

		latitude=(
			30
			30
			30
			30
		)

		# Default camera longitude

		longitude=(
			225
			45
			180
			0
		)

		# Corresponding default view label

		view=(
			"quarter-back"
			"quarter-front"
			"back"
			"front"
		)
		
		# Define positioning presets

		if [[ "$position_preset" == "full" ]]
		then
			position=(0 1 2 3)
			shading=full
			line_width=1
		fi

		if [[ "$position_preset" == "fixed" ]]
		then
			position=(0 1)
			shading=full
			line_width=1
		fi

		if [[ "$position_preset" == "quarter-back" ]]
		then
			position=(0)
			shading=full
			line_width=1
		fi

		if [[ "$position_preset" == "quarter-front" ]]
		then
			position=(1)
			shading=full
			line_width=1
		fi

		if [[ "$position_preset" == "back" ]]
		then
			position=(2)
			shading=full
			line_width=1
		fi

		if [[ "$position_preset" == "front" ]]
		then
			position=(3)
		fi

		if [[ "$position_preset" == "outline" ]]
		then
			position=(1)
			shading=flat
			line_width=0

			renders_directory="$outline_directory"
		fi

		# Render

		for coordinates in ${position[@]}
		do
			# Check for the renders directory existence

			if [ ! -d "$renders_directory" ]
			then
				mkdir -p "$renders_directory"
			fi

			cd "$renders_directory" || exit

			# Render model using specified parameters according to rendering preset

			echo "${cyan}Rendering $model_file_render_name-${view[coordinates]}...${reset}"

			run_leocad "$model" $coordinates

			wait

			# Create outline splash image

			if [[ "$position_option" == "outline" ]]
			then
				# Rename renders to designated splash images

				mv "$model_file_render_name-${view[1]}.${extension}" "${outline_directory}/outline.${extension}"
			fi
		done

		echo "${cyan}Done.${reset}"
		echo ""
		
	done
done
